// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(USER)

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  account  Account[]
  messages Message[]
  Order    Order[]
}

enum Role {
  ADMIN
  USER
  FARMER
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  provider          String
  providerAccountId String
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messageIds String[]  @db.ObjectId
  messages   Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Farm {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String   @default("")
  city           String   @default("")
  state          String   @default("")
  zip            String   @default("")
  bio            String   @default("")
  policies       String   @default("")
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  image          Image[]
  logo           Image[]
  email          String   @default("")
  pickupInfo     String   @default("")
  deliveryRadius String   @default("")
  pickup         Boolean  @default(false)
  delivery       Boolean  @default(false)
  phone          String   @default("")
  slug           String   @unique

  label          UnitLabel[]
  certifications Certification[]
  products       Product[]
  order          Order[]
}

model Certification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  farmId      String   @db.ObjectId
  farm        Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
  description String
  imageUrl    Image[]
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  typeId String            @db.ObjectId
  type   CertificationType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@index([farmId])
}

model Category {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  slug      String      @unique
  Billboard Billboard[]
  products  Product[]
}

model Dietary {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique

  productId String[]  @db.ObjectId //
  product   Product[] @relation(fields: [productId], references: [id])
}

model Product {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  price            Float
  isFeatured       Boolean        @default(false)
  isArchived       Boolean        @default(false)
  images           ProductImage[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  shortDescription String
  longDescription  String         @default("")
  stockQuantity    Int            @default(0)
  slug             String         @unique
  farmId           String         @db.ObjectId
  farm             Farm           @relation(fields: [farmId], references: [id], onDelete: Cascade)

  labelId String    @db.ObjectId
  label   UnitLabel @relation(fields: [labelId], references: [id])

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  dietaryIds String[]  @db.ObjectId
  dietary    Dietary[] @relation(fields: [dietaryIds], references: [id])

  OrderItem OrderItem[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String   @default("")
  address     String   @default("")
  referenceId String   @default("")

  farmId String @db.ObjectId
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  customerId String @db.ObjectId
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  paymentId String  @db.ObjectId
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  orderId String @db.ObjectId
  Order   Order  @relation(fields: [orderId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  referenceId     String   @default("")
  amount          Float    @default(0)
  status          String   @default("")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orderId         String   @db.ObjectId
  paymentMethodId String
  paymentIntentId String

  transfer Transfer[]

  Order Order[]
}

model Transfer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  transfer_id String   @default("")
  amount      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  farmId      String   @db.ObjectId // Foreign Key to farm
  paymentId   String   @db.ObjectId
  payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

type Image {
  url String
}

model Billboard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model CertificationType {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  valid         Boolean
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Certification Certification[]
}

model UnitLabel {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  farmId    String    @db.ObjectId // Foreign Key to farm
  farm      Farm      @relation(fields: [farmId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([farmId])
}
